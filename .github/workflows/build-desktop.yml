name: Build Desktop Apps

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-latest, macos-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: frontend/requirements.txt

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install frontend requirements
        run: pip install --upgrade -r frontend/requirements.txt

      - name: Create frontend .env (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          : ${API_BASE_URL:=${{ secrets.API_BASE_URL }}}
          : ${DEBUGGER_ADDRESS:=${{ vars.DEBUGGER_ADDRESS }}}
          : ${SLEEP_BETWEEN_OK_RUNS:=${{ vars.SLEEP_BETWEEN_OK_RUNS }}}
          : ${DEBUGGER_ADDRESS:=localhost:9222}
          : ${SLEEP_BETWEEN_OK_RUNS:=3}
          cat > frontend/.env <<EOF
          API_BASE_URL=${API_BASE_URL}
          DEBUGGER_ADDRESS=${DEBUGGER_ADDRESS}
          SLEEP_BETWEEN_OK_RUNS=${SLEEP_BETWEEN_OK_RUNS}
          EOF

      - name: Create frontend .env (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          > frontend\.env (
            echo API_BASE_URL=%API_BASE_URL%
            echo DEBUGGER_ADDRESS=%DEBUGGER_ADDRESS%
            echo SLEEP_BETWEEN_OK_RUNS=%SLEEP_BETWEEN_OK_RUNS%
          )
        env:
          API_BASE_URL: ${{ secrets.API_BASE_URL }}
          DEBUGGER_ADDRESS: ${{ vars.DEBUGGER_ADDRESS || 'localhost:9222' }}
          SLEEP_BETWEEN_OK_RUNS: ${{ vars.SLEEP_BETWEEN_OK_RUNS || '3' }}

      - name: Package (Windows via .spec)
        if: runner.os == 'Windows'
        run: pyinstaller FaxAutomationClient.spec

      - name: Copy .env into dist (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: copy /Y frontend\.env dist\.env

      - name: Package (macOS/Linux via script)
        if: runner.os != 'Windows'
        shell: bash
        run: bash frontend/package.sh

      - name: Verify packaged env presence
        shell: bash
        run: |
          echo "Runner OS: $RUNNER_OS"
          if [ "$RUNNER_OS" = "macOS" ]; then
            ls -la dist/FaxAutomationClient.app/Contents/MacOS || true
            [ -f dist/FaxAutomationClient.app/Contents/MacOS/.env ] && echo ".env present in app bundle"
          else
            ls -la dist || true
            [ -f dist/.env ] && echo ".env present next to binary"
          fi

      - name: Archive Linux build as tar.gz (preserve exec perms)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          cd dist
          FILES=(FaxAutomationClient)
          [ -f chromedriver ] && FILES+=(chromedriver)
          [ -f .env ] && FILES+=(.env)
          tar -czf FaxAutomationClient-linux-x64.tar.gz "${FILES[@]}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: FaxAutomationClient-${{ runner.os }}
          path: |
            dist/**
            dist/FaxAutomationClient-linux-x64.tar.gz
          if-no-files-found: error
